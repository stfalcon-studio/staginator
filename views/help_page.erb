<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
  <title>Staginator: help</title>

  <!-- Bootstrap -->
  <link href="/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.5/styles/default.min.css">
  <link rel="stylesheet" href="/vendor/highlightjs/solarized_dark.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.5/highlight.min.js"></script>
  <script>hljs.initHighlightingOnLoad();</script>
  <style>
      pre {
          border: none!important;
          padding: 0!important;
      }
  </style>
  <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
  <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
  <!--[if lt IE 9]>
  <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
  <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
  <![endif]-->
</head>
<body>
<%= ERB.new(File.read("#{settings.root}/views/navbar.erb"), 0, '-').result(binding) %>

<div class='container '>
  <div class="row">
    <div class="col-md-3">
      <div class="list-group">
        <a href="/help" class="list-group-item <%= 'active' if @active_article == 'home' %>">Home</a>
        <a href="/help/cron_task" class="list-group-item <%= 'active' if @active_article == 'cron_task' %>">Adding cron task to container</a>
        <a href="/help/container_customization" class="list-group-item <%= 'active' if @active_article == 'container_customization' %>">Container customization</a>
        <a href="/help/limits" class="list-group-item <%= 'active' if @active_article == 'limits' %>">Container limits</a>
      </div>
    </div>
    <div class="col-md-9">
      <% if @active_article == 'home' %>
          <h3>Home</h3>
          <hr>
          Staginator is tool for easy create stagings infrastructure. It allows run stagings for each branch of your project in different docker containers.
      <% end %>
      <% if @active_article == 'cron_task' %>
          <h3>Adding cron task to container</h3>
          <hr>
          <p>If you want add some cron task in container. Just add cron.conf into root of your git repository.</p>
          <p>Example:</p>
          <pre><code class="bash hljs">WEB_PATH=%dont_touch_this%

*/30 * * * *   www-data $WEB_PATH/console cool:feature --env=prod
10   * * * *   www-data $WEB_PATH/console another:cool:feature --env=prod</code></pre>
    <% end %>
      <% if @active_article == 'container_customization' %>
          <h3>Container customization</h3>
          <hr>
          <h4>Symfony templates:</h4>
          <p>You can install additional packages, run services and add own steps to deploy procedure.</p>
          <p>Just add staginator.yml to root of your git repository.</p>
          <pre><code class="bash hljs">apt_packages: ['redis-server', 'supervisor']
run_services: ['redis-server', 'supervisor']
deploy_callbacks:
    # run command after clone repo. $PWD = /stag/new
    after_clone: ['ls -l', 'whoami']
    # symfony only, do smth before run composer. $PWD = /stag/new
    before_composer: ['rm web/app.php', 'ls -l web']
    # symfony only, run smth after composer install. $PWD = /stag/new
    after_composer: ['rm -rf vendor/*', 'touch vendor/no_way']
    # run command at the end of deploy. $PWD = /stag/www
    after_deploy: ['rm .htaccess', 'ls -la']</code></pre>
          <hr>
          <h4>Generic templates:</h4>
          <p>Generic template provide you more customisation options to deploy procedure. Unlike Symfony templates, that allow you easy run symfony app, Generic template needs more time to configure all correctly. Also Generic template after some manipulation allows you to run any php application, not only symfony.</p>
          <p>In this example you can see how deploy symfony app with generic template.</p>
          <pre><code class="bash hljs">apt_packages: ['gearman', 'php5-gearman', 'gearman-server']
run_services:
    - 'gearman-job-server'
    - 'gearman-server'
deploy_callbacks:
    after_clone:
        - '/stag/new/upload_stag_db.sh'
    deploy_steps:
        - 'cp app/config/parameters.yml.stag app/config/parameters.yml'
        - "sed -i \"s/database_name:.*/database_name: `echo -n $STAGING_BRANCH|md5sum | awk '{print $1}'`/\" app/config/parameters.yml"
        - 'curl -s https://getcomposer.org/installer | php'
        - './composer.phar install --prefer-dist'
        - './console --no-interaction doctrine:migrations:migrate'
        - './console doctrine:fixtures:load --no-interaction --append'
    after_deploy:
        - 'su www-data -c "php app/console assets:install --env=prod"'
        - 'su www-data -c "php app/console assetic:dump --env=prod"'</code></pre>
          <p>upload_stag_db.sh allows you to add some db with data (if you not have fixtures for all functional)</p>
          <pre><code class="bash hljs">#!/bin/bash

STAGING_BRANCH=${STAGING_BRANCH:-""}
db_user="root"
db_pass="some_pass"
db_name=`echo -n $STAGING_BRANCH|md5sum | awk '{print $1}'`

mysql -u $db_user -p$db_pass $db_name -h name-mysql < /stag/new/data.sql</code></pre>
          <p>You can access to mysql password via mysql_password script. It's allows you to edit application config in generic templates or for some another custom tasks.</p>
          <pre><code class="bash hljs">- 'sed -i "s/database_password =.*/database_password = `mysql_password`/" app/config/parameters.ini'</code></pre>
      <% end %>
      <% if @active_article == 'limits' %>
          <h3>Container limits</h3>
          <hr>
          <p>One container will be able to use <%= @maxmem %> and <%= @maxcpu %> CPU cores.</p>
      <% end %>
    </div>
  </div>
</div>

<%= ERB.new(File.read("#{settings.root}/views/footer.erb"), 0, '-').result(binding) %>
<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="/vendor/bootstrap/js/bootstrap.min.js"></script>
</body>
</html>
